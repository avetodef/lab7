package db;


import org.apache.commons.dbcp.BasicDataSource;

import java.io.OutputStream;
import java.sql.*;
import java.util.logging.LogManager;
//import org.apache.logging;
import java.sql.*;
import java.util.Properties;

/**
 * Класс обработки базы данных
 */


public class DataBaseHandler {

    //TODO класс с методами работы с бд(удалили,вылетела и тд)
    //главные таблицы
    public static final String ROUTE_TABLE = "route";
    public static final String USER_TABLE = "my_user";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String LOCATION_FROM_TABLE = "location_from";
    public static final String LOCATION_TO_TABLE = "location_to";
    //составляющие таблицы ROUTE_TABLE
    public static final String ROUTE_TABLE_ID_COLUMN = "id";
    public static final String ROUTE_TABLE_NAME_COLUMN = "name";
    public static final String ROUTE_TABLE_DATE_COLUMN = "creation_date";
    public static final String ROUTE_TABLE_DISTANCE_COLUMN = "distance";
    public static final String ROUTE_TABLE_USER_ID_COLUMN = "user_id";
    //составляющие таблицы USER_TABLE
    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_URL_COLUMN = "url";
    public static final String USER_TABLE_LOGIN_COLUMN = "login";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    //составляющие таблицы COORDINATES_TABLE
    public static final String COORDINATES_TABLE_ID_COLUMN = "id";
    public static final String COORDINATES_TABLE_X_COLUMN = "coordinate_x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "coordinate_y";
    //составляющие таблицы LOCATION_FROM_TABLE
    public static final String LOCATION_FROM_TABLE_ID_COLUMN = "id";
    public static final String LOCATION_FROM_TABLE_X_COLUMN = "from_x";
    public static final String LOCATION_FROM_TABLE_Y_COLUMN = "from_y";
    public static final String LOCATION_FROM_TABLE_NAME_COLUMN = "name_from";
    //составляющие таблицы LOCATION_TO_TABLE
    public static final String LOCATION_TO_TABLE_ID_COLUMN = "id";
    public static final String LOCATION_TO_TABLE_X_COLUMN = "to_x";
    public static final String LOCATION_TO_TABLE_Y_COLUMN = "to_y";
    public static final String LOCATION_TO_TABLE_NAME_COLUMN = "name_to";

    static BasicDataSource basepool = new BasicDataSource();
    static {
        basepool.setUrl("jdbc:postgresql://localhost:5432/postgres");
        basepool.setUsername("postgres");
        basepool.setPassword("lterm54201");
    }


    private final String JDBC_DRIVER = "org.postgresql.Driver";



    private Connection connection;
    //TODO прописать соединение с базой данных

    /*public DataBaseHandler(String URL, String password,String login) {
        this.URL = URL;
        this.password = password;
        this.login = login;
        connectToDataBase();
    }*/

    //TODO подключить библиотеку логера,прописать метод forName(сейчас он в классе, так не надо)
    //public static Logger logger = LogManager.getLogger("ServerLogger");

    /**
     * Метод соединения с базой данных
     */
    public void connectToDataBase() {
        try {
        //    connection = DriverManager.getConnection(login, URL, password);
            connection = basepool.getConnection("postgres","lterm54201");
            System.out.println("Соединение прервано.");
            //ServerApp.Logger.info("Соединение с базой данных установлено.");

        } catch (SQLException e) {
            //ServerApp.logger.error("Произошла ошибка при подключении к базе данных.");
            System.err.println("Произошла ошибка при подключении к базе данных.");
        /*} catch(ClassNotFoundException exception){
            System.out.println("Драйвер управления базой данных не найден.");
            //ServerApp.logger.error("Драйвер управления базой данных не найден.");
        }*/
        }
    }
    // Тут мы готовим запросик и хотим, чтоб ключи (идшки) генерировались автоматически

    /**
     * @param sqlStatement (тот самый запрос который мы хотим сгенерировать
     * @param generateKeys (ключ с помощью которого мы это делаем)
     * @return preparedStatement
     * @throws SQLException (Ловим исключение о том, что у нас говно залупа произошла с базой данных)
     */

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        connection = basepool.getConnection("postgres","lterm54201");
        //connection = DriverManager.getConnection(login, URL, password);
        try{
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS:Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement,autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException e){
            if (connection == null) System.err.println("Соединения с базой данных нет. Попробуйте ещё раз.");
            System.out.println(e.getMessage() + "dbh 117");
            return null;
        }
    }
    // Мы написали и предали эскьюэль запрос, теперь надо запрос закрыть(для обработки)

    /**
     * Закрыть запрос хочется
     * @param sqlStatement запрос, который мы хотим закрыть
     */
    public void closePreparedStatement(PreparedStatement sqlStatement) throws SQLException {
        connection = basepool.getConnection("postgres","lterm54201");
        if (sqlStatement == null) return;
        try{
            sqlStatement.close();
            System.out.println("Запрос закрыт");
        }catch(SQLException e){
            System.err.println("Произошла ошибка при закрытии запроса"+sqlStatement+".");
        }
    }

    /**
     * Класс для отключения соединения с базой данных
     */
    public void closeConnection() throws SQLException {
        connection = basepool.getConnection("postgres","lterm54201");
        if (connection == null) return;
        try{
            connection.close();
            System.out.println("Соединение с базой данных разорвано");
            //ServerApp.logger.info("Соединение с базой данных разорвано")

        }catch (SQLException sqlException){
            System.err.println("Произошла ошибка при разрыве соединения с базой данных");
            //ServerApp.logger.error("Произошла ошибка при разрыве соединения с базой данных")
        }
    }
    //Устанавливаем режим транзакции базы данных
    public void setCommitMode() throws SQLException {
        connection = basepool.getConnection("postgres","lterm54201");
        try {
            if (connection==null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException e){
            System.out.println("Произошла ошибка при установке режима транзакции базы данных");
        }
    }
    // Установка норального режима базы данных
    public void setNormalMode() throws SQLException {
        connection = basepool.getConnection("postgres","lterm54201");
        try {
            if (connection==null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException e){
            System.out.println("Произошла ошибка при установке нормального режима базы данных");
        }
    }
    // перевод базы данных в другое состояние
    public void commit() throws SQLException {
        connection = basepool.getConnection("postgres","lterm54201");
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException e){
            System.err.println("Не удалось перевести базу данных в новое состояние");
        }
    }

    // Хочется вернуть в исходное состояние
    public void rollback() throws SQLException{
        connection = basepool.getConnection("postgres","lterm54201");
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        }catch (SQLException sqlException){
            System.err.println("Не удалось вернуть базу данных в исходное состояние");
        }
    }
    public void saveSQL() throws SQLException{
        connection = basepool.getConnection("postgres","lterm54201");
        try{
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        }catch (SQLException e){
            System.err.println("Не удалось сохранить базу данных в данном состоянии.");
        }
    }


    /*public Properties build() throws SQLException {
        Connection conn = DriverManager.getConnection(URL, login, password);
        Statement  stmt = conn.createStatement();
        PreparedStatement preparedStatement = null;
        PreparedStatement statement = new PreparedStatement.Builder()
                .tableName("route")
                .fields("name", "coordinates_id", "creation_date", "age", "color", "type", "character", "cave_id", "creator_name")
                .valuesSetter(s -> {
                    s.setString(1, element.getName());
                    s.setInt(2, coordId);
                    s.setDate(3, Date.valueOf(element.getCreationDate()));
                    s.setLong(4, element.getAge());

                    s.setString(5, element.getColor() == null ? null : element.getColor().getDescription());

                    s.setString(6, element.getType().getDescription());

                    s.setString(7, element.getCharacter() == null ? null : element.getCharacter().getDescription());

                    s.setInt(8, caveId);
                    s.setString(9, element.getCreatorName());
                }).build()*/
    }
